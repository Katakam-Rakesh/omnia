# Copyright 2022 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Validate BMC group data file exists
  ansible.builtin.stat:
    path: "{{ bmc_group_data_filename }}"
  register: bmc_group_data_stat

- name: Fail if BMC group data file does not exist
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_file_not_found_msg }}"
  when: not bmc_group_data_stat.stat.exists

- name: Read BMC group data
  ansible.builtin.set_fact:
    bmc_group_data: "{{ lookup('file', bmc_group_data_filename).splitlines() }}"

- name: Validate BMC group data headers
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_invalid_msg }}'"
  when: bmc_group_data[0] != bmc_group_data_headers

- name: Extract BMC_IP values for federated telemetry
  when: hostvars['localhost']['federated_idrac_telemetry_collection'] 
  block:
    - name: Extract BMC_IP values grouped by PARENT (service tags)
      ansible.builtin.set_fact:
        sn_bmc_ips: >-
          {{
            dict(
              bmc_group_data[1:]
              | map('split', ',')
              | selectattr('2', 'truthy')
              | groupby('2')
              | map('first', '0') | zip(
                  bmc_group_data[1:]
                  | map('split', ',')
                  | selectattr('2', 'truthy')
                  | groupby('2')
                  | map(attribute='1')
                  | map('map', '0')
                  | map('list')
                )
            )
          }}

    - name: Extract BMC_IPs with no parent (manager list)
      ansible.builtin.set_fact:
        oim_bmc_ips: >-
          {{
            bmc_group_data[1:]
            | map('split', ',')
            | selectattr('2', 'falsy')
            | map('first')
            | list
          }}

    - name: Combine BMC IPs into final sn_bmc_ip_map
      ansible.builtin.set_fact:
        bmc_ips: "{{ sn_bmc_ips | combine({'oim': oim_bmc_ips}) }}"

- name: Extract BMC_IP values for non federated telemetry
  ansible.builtin.set_fact:
    bmc_ips: >-
      {{
        dict(
          sn_bmc_ips.items() | list +
          [('oim',
            bmc_group_data[1:]
            | map('split', ',')
            | map('first')
            | unique
            | list
          )]
        )
      }}
  when: not hostvars['localhost']['federated_idrac_telemetry_collection']

- name: Validate each BMC IP
  ansible.builtin.fail:
    msg: "{{ bmc_group_data_invalid_ip_msg }} : {{ item }}"
  when: item is not match('^\\d{1,3}(\\.\\d{1,3}){3}$')
  loop: "{{ bmc_ips }}"
