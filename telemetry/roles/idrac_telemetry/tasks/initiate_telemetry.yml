# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include and initialize variables
- name: Initiate telemetry process if idrac_support is enabled
  when: hostvars['localhost']['idrac_telemetry_support'] is true
  block:
    - name: Set server host
      ansible.builtin.set_fact:
        service_node_hostname: >-
          {{
            hostvars[inventory_hostname]['service_tag']
            if inventory_hostname != 'localhost'
            else 'oim'
          }}

    - name: Include telemetry common vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/telemetry_validation/vars/main.yml"
      no_log: true

    - name: Include idrac-telemetry vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/idrac_telemetry/vars/main.yml"
      no_log: true

    - name: Initialize variables
      ansible.builtin.set_fact:
        idrac_telemetry_scripting_repo: "https://github.com/dell/iDRAC-Telemetry-Scripting.git"
        idrac_telemetry_scripting_stable_commit: "1f4bb26"
        min_firmware_version_reqd: 4
        datacenter_license: false
        firmware_version: false
        skipped_idrac: []
        telemetry_idrac: []
        service_type: 3
        auth_type: 1
        idrac_ip_count: 0
        filtered_idrac_count: 0
        failed_idrac_count: 0
        failed_idrac: []
        idrac_ip: []

    - name: Fetch and filter iDRAC details from mysqlDB
      block:
        - name: Add iDRAC host in mysqlDB
          block:
            - name: Check if services table exists
              community.mysql.mysql_query:
                login_host: "{{ mysqldb_host }}"
                login_port: "{{ mysqldb_container_port }}"
                login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
                login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
                query: "SHOW TABLES FROM {{ mysqldb_name }}"
              register: services_table_exists
              until: services_table_exists is not failed and services_table_exists.query_result[0] | length != 0
              retries: "{{ db_retries }}"
              delay: "{{ db_delay }}"
              no_log: true

            - name: Fetch iDRAC details of telemetry configured iDRACs
              community.mysql.mysql_query:
                login_host: "{{ mysqldb_host }}"
                login_port: "{{ mysqldb_container_port }}"
                login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
                login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
                query: "SELECT ip from {{ mysqldb_name + '.services' }}"
              register: db_idrac_ip
              until: db_idrac_ip is not failed
              retries: "{{ db_retries }}"
              delay: "{{ db_delay }}"
              no_log: true

            - name: Extract list of IPs from query_result
              ansible.builtin.set_fact:
                db_idrac_ips: "{{ db_idrac_ip.query_result[0] | map(attribute='ip') | list }}"

            - name: Generate filtered iDRAC IP list
              ansible.builtin.set_fact:
                filtered_bmc_ips: "{{ hostvars['localhost']['bmc_ips'][service_node_hostname] | difference(db_idrac_ips) }}"
      rescue:
        - name: Show failure msg
          ansible.builtin.fail:
            msg: "{{ mysqldb_insert_fail_msg }}"

# Filter iDRACs matching telemetry pre-requisites

    - name: Add iDRAC nodes and initiate telemetry
      ansible.builtin.include_tasks: filter_idrac.yml
      with_items: "{{ filtered_bmc_ips }}"
      loop_control:
        index_var: idrac_index
      # no_log: true

# Add iDRAC Credentials in DB and enable telemetry fetching

    - name: Enable telemetry collection on iDRAC
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Git clone telemetry initialization repo
          ansible.builtin.git:
            repo: "{{ idrac_telemetry_scripting_repo }}"
            dest: "{{ telemetry_dir_path }}{{ idrac_telemetry_scripting_folder }}"
            version: "{{ idrac_telemetry_scripting_stable_commit }}"
          register: telemetry_collection
          when: service_node_hostname == 'oim'

        - name: Enable telemetry collection on iDRACs
          ansible.builtin.command: >-
            python3 ./ConfigurationScripts/EnableOrDisableAllTelemetryReports.py -ip "{{ item }}"
            -u "{{ hostvars['localhost']['bmc_username'] }}" -p "{{ hostvars['localhost']['bmc_password'] }}" -s Enabled
          args:
            chdir: "{{ telemetry_dir_path }}{{ idrac_telemetry_scripting_folder }}"
          with_items: "{{ telemetry_idrac }}"
          changed_when: false
          no_log: true

      rescue:
        - name: Show failure msg
          ansible.builtin.debug:
            msg: "Enabling telemetry on an iDRAC failed"

    - name: Add iDRAC details in mysqldb
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Add iDRAC host in mysqlDB
          community.mysql.mysql_query:
            login_host: "{{ mysqldb_host }}"
            login_port: "{{ mysqldb_container_port }}"
            login_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
            login_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
            login_db: "{{ mysqldb_name }}"
            query: INSERT IGNORE INTO {{ mysqldb_name + '.services' }} (ip, serviceType, authType, auth)
                  VALUES (%s, %s, %s ,'{"password":"{{ bmc_password | quote }}","username":"{{ bmc_username | quote }}"}')
            positional_args:
              - "{{ item }}"
              - "{{ service_type }}"
              - "{{ auth_type }}"
          with_items: "{{ telemetry_idrac }}"
          register: add_idrac_to_db
          until: add_idrac_to_db is not failed
          retries: "{{ db_retries }}"
          delay: "{{ db_delay }}"
          no_log: true
      rescue:
        - name: Show failure msg
          ansible.builtin.fail:
            msg: "{{ mysqldb_insert_fail_msg }}"

# Initiate iDRAC collection
    - name: Initiate telemetry collection
      when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
      block:
        - name: Initiate telemetry-collector
          containers.podman.podman_container_exec:
            name: "{{ idrac_telemetry_container }}"
            command: "nohup go run cmd/redfishread/redfishread.go &"
            detach: true
          delegate_to: oim
          connection: ssh

    - name: Create and update telemetry report from template
      block:
        - name: Create telemetry report
          ansible.builtin.template:
            src: telemetry_report.j2
            dest: "{{ telemetry_report_path }}"
            mode: "{{ filemode }}"
            force: true

        - name: Telemetry Report
          ansible.builtin.debug:
            msg: "{{ telemetry_report.splitlines() }}"
