# Copyright 2024 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Include and initialize variables
- name: Initiate telemetry process if idrac_support is enabled
  # when: idrac_telemetry_support is true
  block:
    - name: Include telemetry common vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/telemetry_validation/vars/main.yml"
      no_log: true

    - name: Include idrac-telemetry vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/idrac_telemetry/vars/main.yml"
      no_log: true

    - name: Include timescaledb vars
      ansible.builtin.include_vars: "{{ playbook_dir }}/roles/timescaledb/vars/main.yml"
      no_log: true

    - name: Initialize variables
      ansible.builtin.set_fact:
        idrac_telemetry_scripting_repo: "https://github.com/dell/iDRAC-Telemetry-Scripting.git"
        idrac_telemetry_scripting_stable_commit: "1f4bb26"
        idrac_telemetry_scripting_folder: iDRAC-Telemetry-Scripting
        login_vars_file: "{{ playbook_dir }}/input_params/telemetry_login_vars.yml"
        vault_filename: "{{ playbook_dir }}/input_params/.login_vault_key"
        idrac_inventory_filename: "/opt/omnia/idrac_inventory"
        idrac_file_existence: "iDRAC inventory file does not exist. Check /opt/omnia/idrac_inventory."
        monitor_config_file: "{{ playbook_dir }}/../input/monitor_config.yml"
        monitor_config_vault_filename: "{{ playbook_dir }}/../input/.monitor_vault_key"
        bmc_group_data_filename: "/opt/omnia/telemetry/bmc_group_data.csv"
        min_firmware_version_reqd: 4
        datacenter_license: false
        firmware_version: false
        file_perm: '0644'
        telemetry_idrac: []
        service_type: 3
        auth_type: 1
        idrac_awx_count: 0
        filtered_idrac_count: 0
        failed_idrac: []
        awx_idrac: []

    - name: Read bmc_group_data
      set_fact:
        bmc_group_data: "{{ lookup('file', bmc_group_data_filename).splitlines() }}"

    - name: Extract BMC_IP values
      set_fact:
        bmc_ips: "{{ bmc_group_data[1:] | map('split', ',') | map('first') | list }}"

# # Filter iDRACs matching telemetry pre-requisites

#     - name: Add iDRAC nodes and initiate telemetry
#       ansible.builtin.include_tasks: filter_idrac.yml
#       with_items: "{{ bmc_ips }}"
#       loop_control:
#         index_var: idrac_index
#  #     no_log: true

# # Add iDRAC Credentials in DB and enable telemetry fetching

#     - name: Enable telemetry collection on iDRAC
#       when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
#       block:
#         - name: Git clone telemetry initialization repo
#           ansible.builtin.git:
#             repo: "{{ idrac_telemetry_scripting_repo }}"
#             dest: "{{ mount_location + idrac_telemetry_scripting_folder }}"
#             version: "{{ idrac_telemetry_scripting_stable_commit }}"
#           register: telemetry_collection

#         - name: Enable telemetry collection on iDRACs
#           ansible.builtin.command: >-
#             "{{ python_version }}" ./ConfigurationScripts/EnableOrDisableAllTelemetryReports.py -ip "{{ item }}"
#             -u "{{ idrac_username }}" -p "{{ idrac_password }}" -s Enabled
#           args:
#             chdir: "{{ mount_location + idrac_telemetry_scripting_folder }}"
#           with_items: "{{ telemetry_idrac }}"
#           changed_when: false
#           no_log: true

#       rescue:
#         - name: Show failure msg
#           ansible.builtin.debug:
#             msg: "Enabling telemetry on an iDRAC failed"

#     - name: Add iDRAC details in mysqldb
#       when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
#       block:

#         - name: Add iDRAC host in mysqlDB
#           block:
#             - name: Check if services table exists
#               community.mysql.mysql_query:
#                 login_host: "localhost"
#                 login_port: "3306"
#                 login_user: "{{ mysqldb_user }}"
#                 login_password: "{{ mysqldb_password }}"
#                 query: "SHOW TABLES FROM {{ mysqldb_name }}"
#               register: services_table_exists
#               until: services_table_exists is not failed and services_table_exists.query_result[0] | length > 1
#               retries: "{{ db_retries }}"
#               delay: "{{ db_delay }}"
#               no_log: true

#             - name: Add iDRAC host in mysqlDB
#               community.mysql.mysql_query:
#                 login_host: "localhost"
#                 login_port: "3306"
#                 login_user: "{{ mysqldb_user }}"
#                 login_password: "{{ mysqldb_password }}"
#                 login_db: "{{ mysqldb_name }}"
#                 query: INSERT IGNORE INTO {{ mysqldb_name + '.services' }} (ip, serviceType, authType, auth)
#                       VALUES (%s, %s, %s ,'{"password":"{{ idrac_password | quote }}","username":"{{ idrac_username | quote }}"}')
#                 positional_args:
#                   - "{{ item }}"
#                   - "{{ service_type }}"
#                   - "{{ auth_type }}"
#               with_items: "{{ telemetry_idrac }}"
#               register: add_idrac_to_db
#               until: add_idrac_to_db is not failed
#               retries: "{{ db_retries }}"
#               delay: "{{ db_delay }}"
#               no_log: true
#       rescue:
#         - name: Show failure msg
#           ansible.builtin.fail:
#             msg: "{{ mysqldb_insert_fail_msg }}"

# # Initiate iDRAC collection
#     - name: Initiate telemetry collection
#       when: telemetry_idrac is defined and (telemetry_idrac | length > 0)
#       block:
#         - name: Initiate telemetry-collector
#           containers.podman.podman_container_exec:
#             name : "{{ idrac_telemetry_pod }}"
#             command: 'nohup go run cmd/redfishread/redfishread.go &'
#             tty: true
#           changed_when: false

#     - name: Telemetry report
#       ansible.builtin.debug:
#         msg:
#           - "Count of iDRAC IPs found: {{ idrac_awx_count }}"
#           - "List of iDRAC IPs found: {{ awx_idrac }}"
#           - "Count of iDRAC IPs where telemetry is initiated: {{ filtered_idrac_count }}"
#           - "List of iDRAC IPs where telemetry is initiated: {{ telemetry_idrac }}"
