#  Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# Resource for idrac_telemetry containers

echo "Telemetry resource creation script"

{% if idrac_telemetry_support %}
echo "Creating resources for mysql containers"
# Resource for MySQL container
pcs resource create {{ mysql_container_name }} ocf:heartbeat:podman \
    name={{ mysql_container_name }} \
    image={{ mysql_docker_image }} \
    reuse=true \
    run_opts="{{ mysql_run_opts }}"  \
    op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
    op start interval={{ start_interval }} timeout={{ start_timeout }} \
    op stop interval={{ stop_interval }} timeout={{ stop_timeout }}


echo "Creating resources for ActiveMQ containers"
# Resource for ActiveMQ container
pcs resource create {{ activemq_container_name }} ocf:heartbeat:podman \
  name={{ activemq_container_name }} \
  image={{ activemq_image }} \
  reuse=true \
  run_opts="{{ activemq_run_opts }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }}


# Resource for iDRAC-telemetry-receiver container
echo "Creating resources for idrac_telemetry_receiver container"
pcs resource create {{ idrac_telemetry_receiver_container_name }} ocf:heartbeat:podman \
  name={{ idrac_telemetry_receiver_container_name }} \
  image={{ idrac_telemetry_receiver_go_image }} \
  reuse=true \
  run_opts="{{ idrac_telemetry_receiver_run_opts }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }}


echo "Adding mysql, activemq, and idrac_telemetry_receiver to omnia_telemetry group"
pcs resource group add {{ telemetry_pcs_group }} {{ mysql_container_name }} {{ activemq_container_name }} {{ idrac_telemetry_receiver_container_name }}
pcs constraint colocation add {{ telemetry_pcs_group }} with {{ pcs_group }} INFINITY
{% endif %}

# Resource for prometheus and prometheus_pump
{% if idrac_telemetry_support and idrac_telemetry_collection_type == "prometheus" %}
echo "Creating resources for prometheus and prometheus_pump containers"
# Resource for prometheus pump container
pcs resource create {{ prometheus_pump_container_name }} ocf:heartbeat:podman \
  name={{ prometheus_pump_container_name }} \
  image={{ prometheus_pump_image }} \
  reuse=true \
  run_opts="{{ prometheus_pump_run_opts }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }}


# Resource for prometheus container
pcs resource create {{ prometheus_container_name }} ocf:heartbeat:podman \
  name={{ prometheus_container_name }} \
  image={{ prometheus_image }} \
  reuse=true \
  run_opts="{{ prometheus_run_opts }}" \
  run_cmd="--config.file=/config/prometheus.yml --storage.tsdb.path=/prometheus" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }}

echo "Adding prometheus and prometheus_pump to telemetry group"
pcs resource group add {{ telemetry_pcs_group }} {{ prometheus_pump_container_name }} {{ prometheus_container_name }}
{% endif %}

# Create a file which signifies the pcs resources were created.
# This file also contains the resources and its state which ansible can check against.
echo "$(date): PCS Container Resources Have Been Created"
pcs resource | awk -F' ' '{print $2 " " $4}' | sed 's/^\s*//;s/\s*$//' > {{ pcs_sn_container_resources_finished }}
