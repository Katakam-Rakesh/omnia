# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Check if Grafana container is present # noqa: name[template]
  containers.podman.podman_container_info:
    name: "{{ grafana_container_name }}"
  register: grafana_container_info
  failed_when: false

- name: Deploy Grafana container and check deployment status
  when:
    - grafana_container_info.containers | length == 0 or grafana_container_info.containers[0].State.Status != 'running'
  block:
    - name: Create Grafana directories
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: directory
        mode: "{{ dir_permissions_755 }}"
      loop: "{{ grafana_podman_volumes }}"

    - name: Create Podman bind-mounted volumes for Grafana
      containers.podman.podman_volume:
        name: "{{ item.name }}"
        state: present
        driver: local
        options:
          - "o=bind"
          - "type=none"
          - "device={{ item.path }}"
      loop: "{{ grafana_podman_volumes }}"

    - name: Pull Grafana Podman image
      containers.podman.podman_image:
        name: "{{ grafana_image }}"
        tag: "{{ grafana_image_tag }}"
        state: present
      register: image_pull_result

    - name: Fail if Grafana image pull fails
      ansible.builtin.fail:
        msg: "{{ grafana_image_pull_fail_msg }}"
      when: image_pull_result.failed

    - name: Verify Grafana image exists
      containers.podman.podman_image_info:
        name: "{{ grafana_image }}:{{ grafana_image_tag }}"
      register: image_facts

    - name: Fail if Grafana image not found
      ansible.builtin.fail:
        msg: "{{ grafana_image_not_found_msg }}"
      when: not image_facts.images

    - name: Create Podman secrets for Grafana
      containers.podman.podman_secret:
        name: "{{ item.name }}"
        state: present
        data: "{{ item.value | string }}"
        force: true
      no_log: true
      loop: "{{ grafana_secrets }}"

    - name: Deploy Grafana container with Podman secrets
      containers.podman.podman_container:
        name: "{{ grafana_container_name }}"
        image: "{{ grafana_image }}:{{ grafana_image_tag }}"
        state: started
        recreate: false
        restart_policy: "no"
        network_mode: host
        volumes: "{{ grafana_volumes }}"
        secrets:
          - "{{ grafana_user }}"
          - "{{ grafana_user_password }}"
        env:
          GF_SERVER_HTTP_PORT: "{{ grafana_port }}"
          GF_USERS_ALLOW_SIGN_UP: "false"
          GF_USERS_ALLOW_ORG_CREATE: "false"
        entrypoint: "{{ bin_sh }}"
        command:
          - -c
          - "{{ grafana_entry_script }}"
      no_log: false

    - name: Check if Grafana container is running after deployment
      containers.podman.podman_container_info:
        name: "{{ grafana_container_name }}"
      register: grafana_container_status
      until: grafana_container_status.containers | length > 0 and
             grafana_container_status.containers[0].State.Status == 'running'
      retries: "{{ max_retries }}"
      delay: "{{ delay_count }}"

    - name: Notify user of Grafana deployment status
      ansible.builtin.debug:
        msg: "{{ grafana_container_success_msg }}"
      when:
        - grafana_container_status.containers | length > 0
        - grafana_container_status.containers[0].State.Status == 'running'

    - name: Check if {{ grafana_port }} port is started # noqa: name[template]
      ansible.builtin.wait_for:
        host: localhost
        port: "{{ grafana_port }}"
        state: started
        timeout: "{{ wait_time }}"
      failed_when: false
      when: grafana_container_status.containers | length > 0

  rescue:
    - name: Grafana container deployment failed
      ansible.builtin.fail:
        msg: "{{ grafana_container_failure_msg }}"
