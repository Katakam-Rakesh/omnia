# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

omnia_nfs_share: "{{ oim_shared_path }}/omnia"
dir_permissions_755: "0755"
file_mode: "0644"
max_retries: 10
delay_count: 5
telemetry_data_dir: "{{ omnia_nfs_share }}/telemetry"
telemetry_log_dir: "{{ omnia_nfs_share }}/log/telemetry"

# Usage: deploy_prometheus_pump_container.yml
prometheus_pump_log_dir: "{{ telemetry_log_dir }}/prometheus_pump"
prometheus_pump_dir: "{{ telemetry_data_dir }}/prometheus_pump"
prometheus_pump_init_script:
 - template: "{{ role_path }}/templates/prometheus_pump_init.sh.j2"
   dest: "{{ prometheus_pump_dir }}/prometheus_pump.sh"
   mode: "{{ dir_permissions_755 }}"
prometheus_pump_entry_script: "/opt/omnia/telemetry/prometheus_pump/prometheus_pump.sh"
prometheus_pump_directories:
 - { path: "{{ prometheus_pump_log_dir }}", mode: "{{ dir_permissions_755 }}" }
 - { path: "{{ prometheus_pump_dir }}", mode: "{{ dir_permissions_755 }}" }
idrac_telemetry_receiver_dir_path: "{{ omnia_nfs_share }}/telemetry/idrac_telemetry/idrac_telemetry_receiver"
idrac_telemetry_reference_path: "{{ idrac_telemetry_receiver_dir_path }}/iDRAC-Telemetry-Reference-Tools"
prometheus_pump_volumes:
 - "{{ idrac_telemetry_reference_path }}:/go/src/github.com/telemetry-reference-tools{{ selinux_option }}"
 - "{{ prometheus_pump_dir }}:/opt/omnia/telemetry/prometheus_pump{{ selinux_option }}"
prometheus_pump_container_name: "prometheus_pump"
# Tag is fixed for golang image as of 12-06-2025
prometheus_pump_image: "docker.io/library/golang:1.24"
prometheus_pump_receiver_env:
 MESSAGEBUS_HOST: "localhost"
 MESSAGEBUS_PORT: "61613"
 PROMETHEUSDB_SERVER: "prometheus"
prometheus_pump_container_success_msg: "The {{ prometheus_pump_container_name }} container has been successfully deployed."
prometheus_pump_container_failure_msg: |
  Deployment of the {{ prometheus_pump_container_name }} container has failed.

  If the container was created but is not in a running state, check the logs using:
    podman logs {{ prometheus_pump_container_name }}

  Then, run the utility playbook to clean up existing OIM resources:
    ansible-playbook utility/oim_cleanup.yml

  After cleanup, re-run the prepare_oim.yml playbook to attempt the deployment again.

# Usage: deploy_prometheus_container.yml
prometheus_log_dir: "{{ telemetry_log_dir }}/prometheus"
prometheus_dir: "{{ telemetry_data_dir }}/prometheus"
prometheus_data_dir: "{{ prometheus_dir }}/prometheus_data"
prometheus_config_dir: "{{ prometheus_dir }}/prometheus_config"
proemetheus_yml_temp_src: "{{ role_path }}/templates/prometheus_yml.j2"
prometheus_podman_volumes:
 - { name: "prometheus_data", path: "{{ prometheus_data_dir }}" }
 - { name: "prometheus_log", path: "{{ prometheus_log_dir }}" }
 - { name: "prometheus_config", path: "{{ prometheus_config_dir }}" }
prometheus_container_name: "prometheus"
# Tag is fixed for prometheus image as of 12-06-2025
prometheus_image: "docker.io/prom/prometheus:v3.4.1"
prometheus_volumes:
 - "prometheus_config:/config"
 - "prometheus_data:/prometheus"
 - "prometheus_log:/prometheus/log"
prometheus_env:
 PROMETHEUS_DB: "poweredge_telemetry_metrics"
 node.name: "127.0.0.1"
prometheus_container_success_msg: "The {{ prometheus_container_name }} container has been successfully deployed."
prometheus_container_failure_msg: |
  Deployment of the {{ prometheus_container_name }} container has failed.

  If the container was created but is not in a running state, check the logs using:
    podman logs {{ prometheus_container_name }}

  Then, run the utility playbook to clean up existing OIM resources:
    ansible-playbook utility/oim_cleanup.yml

  After cleanup, re-run the prepare_oim.yml playbook to attempt the deployment again.
