# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

---
- name: Set Fact for Pulp Server with Admin IP or VIP
  ansible.builtin.set_fact:
    pulp_server_ip: "{{ hostvars['localhost']['admin_nic_ip'] }}"
  when: not hostvars['oim']['hostname_enabled']
  no_log: true

- name: Configure Pulp Server with hostname when hostname_enabled is true
  ansible.builtin.set_fact:
    pulp_server_ip: "" # Placeholder for Pulp hostname
  when: hostvars['oim']['hostname_enabled']
  no_log: true

- name: Check if Pulp configuration file exists
  ansible.builtin.stat:
    path: "{{ pulp_config_filepath }}"
  register: pulp_config_status

- name: Create Pulp config (if file doesn't exist)
  ansible.builtin.command:
    cmd: "{{ pulp_config_cmd_https }}"
  when: not pulp_config_status.stat.exists
  changed_when: false
  no_log: true

- name: Overwrite Pulp config (if file exists)
  ansible.builtin.command:
    cmd: "{{ pulp_config_cmd_overwrite_https }}"
  when: pulp_config_status.stat.exists
  changed_when: false
  no_log: true

- name: Copy config file to default path
  ansible.builtin.copy:
    src: "{{ pulp_config_filepath }}"
    dest: "{{ config_default_loc }}"
    mode: "{{ logs_dir_permission }}"
    remote_src: true

- name: Set cert_san fact based on hostname
  ansible.builtin.set_fact:
    cert_san: subjectAltName=IP:{{ cert_san_ip }},DNS:{{ pulp_server_ip }},DNS:pulp,DNS:localhost
  when: hostvars['oim']['hostname_enabled']
  no_log: true

- name: Set cert_san fact based on IP
  ansible.builtin.set_fact:
    cert_san: subjectAltName=IP:{{ pulp_server_ip }},DNS:pulp,DNS:localhost
  when: not hostvars['oim']['hostname_enabled']
  no_log: true

# CERT GENERATION USING community.crypto x509_certificate MODULE
# - name: Generate private key
#   community.crypto.openssl_privatekey:
#     path: "{{ cert_items.key_path }}"
#     size: 2048
#     type: RSA
#     mode: '0600'

# - name: Generate CSR with SAN and key usages
#   community.crypto.openssl_csr:
#     path: "{{ cert_items.csr_path }}"
#     privatekey_path: "{{ cert_items.key_path }}"
#     common_name: "{{ oim_hostname }}"
#     subject_alt_name:
#       - "IP:0.0.0.0"
#       - "DNS:pulp"
#       - "DNS:{{ oim_hostname }}"
#       - "DNS:localhost"
#     key_usage:
#       - digitalSignature
#       - keyEncipherment
#     extended_key_usage:
#       - serverAuth
#     basic_constraints:
#       - "CA:TRUE"
#     mode: '0644'

# - name: Generate self-signed certificate (no command module)
#   community.crypto.x509_certificate:
#     path: "{{ cert_items.crt_path }}"
#     privatekey_path: "{{ cert_items.key_path }}"
#     provider: selfsigned
#     # selfsigned_not_before: "now"
#     selfsigned_not_after: "+365d"
#     selfsigned_version: 3
#     selfsigned_create_subject_key_identifier: always_create
#     return_content: true

- name: Generating Pulp SSL Certificate
  ansible.builtin.command:
    cmd: "{{ generate_cert_cmd }}"
  changed_when: false

- name: Ensure the pulp group exists
  ansible.builtin.group:
    name: pulp
    state: present

- name: Change group ownership of SSL certificate and key
  ansible.builtin.file:
    path: "{{ item }}"
    group: pulp
    state: file
  loop: "{{ cert_items.values() }}"

- name: Copy Pulp crt to container trust
  ansible.builtin.copy:
    src: "{{ pulp_cert_src }}"
    dest: "{{ ca_trust_path }}"
    mode: "{{ logs_dir_permission }}"

- name: Add Pulp Certificate to TrustStore
  ansible.builtin.command:
    cmd: update-ca-trust extract
  changed_when: false
