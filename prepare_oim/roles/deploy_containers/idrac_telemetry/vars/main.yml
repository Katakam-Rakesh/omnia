# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

# Usage: deploy_mysql_container.yml
omnia_nfs_share: "{{ oim_shared_path }}/omnia"
idrac_telemetry_dir: "{{ omnia_nfs_share }}/telemetry/idrac_telemetry" # For idrac_telemetry
dir_permissions_755: "0755"
root_read_write: "0644"
mysql_docker_image: "docker.io/library/mysql"
mysql_container_name: "mysqldb"
mysql_image_tag: "8.0"
mysql_image_pull_fail_msg: |
  The pull of the MySQL image {{ mysql_container_name }}:{{ mysql_image_tag }} has failed.
  To resolve this issue, please address the following error message: {{ image_pull_result.msg }}.
  After rectifying the issues, you can re-run the playbook to successfully pull the mysqldb image.
mysql_database: "idrac_telemetrydb"
mysql_container_success_msg: "The MySQL container {{ mysql_container_name }} has been successfully created and is running."
mysql_container_failure_msg: |
  Deployment of {{ mysql_container_name }} container failed.
  To resolve this, check logs using 'podman logs {{ mysql_container_name }}' from OIM
  and then run utility/oim_cleanup.yml playbook to clean up existing OIM resources.
  After cleanup, re-run the preparep_oim playbook to successfully deploy the {{ mysql_container_name }} container.
mysql_image_not_found_msg: |
  MySQL image {{ mysql_container_name }}:{{ mysql_image_tag }} not found.
  Please check if image is available and re-run the playbook.
mysql_data_dir: "{{ idrac_telemetry_dir }}/mysqldb"
mysql_log_volume: "{{ omnia_nfs_share }}/log/telemetry/mysqldb"
mysqldb_podman_volumes:
  - { name: "mysqldb_data", path: "{{ mysql_data_dir }}" }
  - { name: "mysqldb_log", path: "{{ mysql_log_volume }}" }
mysql_port: 3306
mysql_root_password: "mysql_root_password"
mysql_user_password: "mysql_user_password"
mysql_user: "mysql_user"
# container_secret_path: "/run/secrets/"
mysql_secrets:
  - { name: "{{ mysql_root_password }}", value: "{{ hostvars['localhost']['mysqldb_root_password'] }}" }
  - { name: "{{ mysql_user_password }}", value: "{{ hostvars['localhost']['mysqldb_password'] }}" }
  - { name: "{{ mysql_user }}", value: "{{ hostvars['localhost']['mysqldb_user'] }}" }
bin_sh: "/bin/sh"
mysql_entry_script: "/usr/local/bin/mysqldb_init.sh"
mysqldb_init_script:
  - {template: "mysqldb_init.sh.j2", dest: "{{ idrac_telemetry_dir }}/mysqldb_init.sh", mode: "{{ dir_permissions_755 }}" }
mysqldb_volumes:
  - "mysqldb_data:/var/lib/mysql{{ selinux_option }}"
  - "mysqldb_log:/var/log/mysql{{ selinux_option }}"
  - "{{ idrac_telemetry_dir }}/mysqldb_init.sh:{{ mysql_entry_script }}{{ selinux_option }}"
mysql_db_create_query:
  - "CREATE DATABASE IF NOT EXISTS {{ mysql_database }}"
  - >
    CREATE TABLE IF NOT EXISTS {{ mysql_database }}.services (
      ip VARCHAR(255) PRIMARY KEY,
      serviceType INT,
      authType INT,
      auth VARCHAR(4096)
    )
create_db_retries: 10
create_db_delay: 10
mysql_database_create_failure_msg: |
  The creation of the MySQL database {{ mysql_database }} has failed.

# Usage: deploy_activemq_container.yml
activemq_logs_dir: "{{ omnia_nfs_share }}/log/telemetry/activemq"
activemq_dir: "{{ idrac_telemetry_dir }}/activemq"
activemq_directories:
  - { path: "{{ activemq_logs_dir }}", mode: "{{ dir_permissions_755 }}" }
  - { path: "{{ activemq_dir }}", mode: "{{ dir_permissions_755 }}" }
activemq_container_name: "activemq"
activemq_image: "docker.io/rmohr/activemq:5.14.3"
wait_time: 10
activemq_podman_volumes:
  - { name: "activemq_log", path: "{{ activemq_logs_dir }}" }
activemq_volumes:
  - "activemq_log:/opt/activemq/data/{{ selinux_option }}"
activemq_container_success_msg: "The {{ activemq_container_name }} container has been successfully deployed."
activemq_container_failure_msg: |
  Deployment of {{ activemq_container_name }} container failed.
  To resolve this, check logs using 'podman logs {{ activemq_container_name }}' from OIM
  and then run utility/oim_cleanup.yml playbook to clean up existing OIM resources.
  After cleanup, re-run the preparep_oim playbook to successfully deploy the {{ activemq_container_name }} container.

# Usage: deploy_idrac_telemetry_receiver_container.yml
idrac_telemetry_receiver_logs_dir: "{{ omnia_nfs_share }}/log/telemetry/idrac_telemetry_receiver"
idrac_telemetry_receiver_dir_path: "{{ idrac_telemetry_dir }}/idrac_telemetry_receiver"
idrac_telemetry_github: https://github.com/dell/iDRAC-Telemetry-Reference-Tools.git
idrac_telemetry_reference_path: "{{ idrac_telemetry_receiver_dir_path }}/iDRAC-Telemetry-Reference-Tools"
reference_tools_stable_commit: "3e78774"
max_retries: 10
delay_count: 5
idrac_git_clone_error_msg: |
  Failed to clone iDRAC Telemetry GitHub repository from {{ idrac_telemetry_github }}
  to {{ idrac_telemetry_reference_path }}.
  Failure: {{ clone_idrac_telemetry.stderr | default(clone_idrac_telemetry.msg, true) | default('Unknown error', true) }}
idrac_telemetry_receiver_directories:
  - { path: "{{ idrac_telemetry_receiver_logs_dir }}", mode: "{{ dir_permissions_755 }}" }
  - { path: "{{ idrac_telemetry_receiver_dir_path }}", mode: "{{ dir_permissions_755 }}" }
  - { path: "{{ idrac_telemetry_reference_path }}", mode: "{{ dir_permissions_755 }}" }
idrac_telemetry_receiver_container_name: "idrac_telemetry_receiver"
idrac_telemetry_receiver_go_image: "docker.io/library/golang:1.17"
idrac_telemetry_receiver_entry_script: "/usr/local/bin/mysqldb_init.sh"
idrac_telemetry_receiver_init_script:
  - template: "idrac_telemetry_receiver_init.sh.j2"
    dest: "{{ idrac_telemetry_dir }}/idrac_telemetry_receiver_init.sh"
    mode: "{{ dir_permissions_755 }}"
idrac_telemetry_receiver_volumes:
  - "{{ idrac_telemetry_reference_path }}:/go/src/github.com/telemetry-reference-tools{{ selinux_option }}"
  - "{{ idrac_telemetry_dir }}/idrac_telemetry_receiver_init.sh:{{ idrac_telemetry_receiver_entry_script }}{{ selinux_option }}"
idrac_telemetry_receiver_env:
  MESSAGEBUS_HOST: "127.0.0.1"
  MESSAGEBUS_PORT: "61613"
  CONFIGUI_HTTP_PORT: "3000"
  MYSQL_DATABASE: "{{ mysql_database }}"
  MYSQL_HOST: "127.0.0.1"
  MYSQL_HOST_PORT: "{{ mysql_port }}"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
idrac_telemetry_receiver_container_success_msg: "The {{ idrac_telemetry_receiver_container_name }} container has been successfully deployed."
idrac_telemetry_receiver_container_failure_msg: |
  Deployment of {{ idrac_telemetry_receiver_container_name }} container failed.
  To resolve this, check logs using 'podman logs {{ idrac_telemetry_receiver_container_name }}' from OIM
  and then run utility/oim_cleanup.yml playbook to clean up existing OIM resources.
  After cleanup, re-run the preparep_oim playbook to successfully deploy the {{ idrac_telemetry_receiver_container_name }} container.
