# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

---

- name: Create MySQL directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "{{ dir_permissions_755 }}"
  loop: "{{ mysql_dirs }}"

- name: Check if MySQL container is present # noqa: name[template]
  containers.podman.podman_container_info:
    name: "{{ mysql_container_name }}"
  register: mysql_container_info
  failed_when: false

- name: Deploy MySQL container and check deployment status
  when:
    - mysql_container_info.containers | length == 0 or mysql_container_info.containers[0].State.Status != 'running'
  block:
    - name: Pull Podman image
      containers.podman.podman_image:
        name: "{{ mysql_docker_image }}"
        tag: "{{ mysql_image_tag }}"
        state: present
      register: image_pull_result

    - name: Fail if the MySQL container image pull fails
      ansible.builtin.fail:
        msg: "{{ mysql_image_pull_fail_msg }}"
      when: image_pull_result.failed

    - name: Verify if the MySQL image exists
      containers.podman.podman_image_info:
        name: "{{ mysql_docker_image }}:{{ mysql_image_tag }}"
      register: image_facts

    - name: Fail if the MySQL image is not found
      ansible.builtin.fail:
        msg: "{{ mysql_image_not_found_msg }}"
      when: not image_facts.images

    - name: Create Podman secrets for MySQL
      containers.podman.podman_secret:
        name: "{{ item.name }}"
        state: present
        data: "{{ item.value | string }}"
      no_log: true
      loop: "{{ mysql_secrets }}"

    - name: Deploy the MySQL container
      containers.podman.podman_container:
        name: "{{ mysql_container_name }}"
        image: "{{ mysql_docker_image }}:{{ mysql_image_tag }}"
        state: present
        restart_policy: "no"
        network_mode: host
        volumes: "{{ mysql_volumes }}"
        secrets:
          - "{{ mysql_root_password }}"
          - "{{ mysql_user }}"
          - "{{ mysql_user_password }}"
        env:
          MYSQL_DATABASE: "{{ mysql_database }}"
        entrypoint: "{{ bin_sh }}"
        command:
          - -c
          - "{{ mysql_entry_script }}"
      no_log: true

    - name: Start the MySQL container
      containers.podman.podman_container:
        name: "{{ mysql_container_name }}"
        state: "started"

    - name: Check if MySQL container is running after deployment
      containers.podman.podman_container_info:
        name: "{{ mysql_container_name }}"
      register: mysql_container_status

    - name: Notify user of MySQL deployment status
      ansible.builtin.debug:
        msg: "{{ mysql_container_success_msg }}"
      when:
        - mysql_container_status.containers | length > 0
        - mysql_container_status.containers[0].State.Status == 'running'

    - name: Check if {{ mysql_port }} port is started # noqa: name[template]
      ansible.builtin.wait_for:
        host: localhost
        port: "{{ mysql_port }}"
        state: started
        timeout: "{{ wait_time }}"
      failed_when: false
      when: mysql_container_status.containers | length > 0

    - name: Execute SQL to create DB and table
      community.mysql.mysql_query:
        login_host: "127.0.0.1"
        login_port: "{{ mysql_port }}"
        login_user: "root"
        login_password: "{{ hostvars['localhost']['mysqldb_root_password'] }}"
        query: "{{ mysql_db_create_query }}"
      no_log: false
      delegate_to: localhost
      register: create_telemetry_schema_result

  rescue:
    - name: Container MySQL deployment failed
      ansible.builtin.fail:
        msg: "{{ mysql_container_failure_msg }}"
