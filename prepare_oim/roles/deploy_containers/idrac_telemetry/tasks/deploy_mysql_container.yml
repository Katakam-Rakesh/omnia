# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

---

- name: Check if {{ mysql_container_name }} container is present # noqa: name[template]
  containers.podman.podman_container_info:
    name: "{{ mysql_container_name }}"
  register: mysql_container_info
  failed_when: false

- name: Pull Podman image
  containers.podman.podman_image:
    name: "{{ mysql_docker_image }}"
    tag: "{{ mysql_image_tag }}"
    state: present
  register: image_pull_result

- name: Fail if the mysql container image pull fails
  ansible.builtin.fail:
    msg: "{{ mysql_image_pull_fail_msg }}"
  when: image_pull_result.failed

- name: Verify if the mysql image exists
  containers.podman.podman_image_info:
    name: "{{ mysql_docker_image }}:{{ mysql_image_tag }}"
  register: image_facts

- name: Fail if the mysql image is not found
  ansible.builtin.fail:
    msg: "{{ mysql_image_not_found_msg }}"
  when: not image_facts.images

- name: Set facts
  ansible.builtin.set_fact:
    mysqldb_root_password: "{{ hostvars['localhost']['mysqldb_root_password'] }}"
    mysqldb_user: "{{ hostvars['localhost']['mysqldb_user'] }}"
    mysqldb_password: "{{ hostvars['localhost']['mysqldb_password'] }}"
  no_log: true

- name: Deploy mysql container and check deployment status
  block:
    - name: Deploy the mysql container
      containers.podman.podman_container:
        name: "{{ mysql_container_name }}"
        image: "{{ mysql_docker_image }}:{{ mysql_image_tag }}"
        state: present
        restart_policy: "no"
        network_mode: host
        volumes: "{{ mysql_volume }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ mysqldb_root_password }}"
          MYSQL_DATABASE: "{{ mysql_database }}"
          MYSQL_USER: "{{ mysqldb_user }}"
          MYSQL_PASSWORD: "{{ mysqldb_password }}"
        privileged: true

    - name: Start the mysql container
      containers.podman.podman_container:
        name: "{{ mysql_container_name }}"
        state: "started"
        privileged: true

    - name: Check if mysql container is running after deployment
      containers.podman.podman_container_info:
        name: "{{ mysql_container_name }}"
      register: mysql_container_status

    - name: Notify user of mysql deployment status
      ansible.builtin.debug:
        msg: "{{ mysql_container_success_msg }}"
      when:
        - mysql_container_status.containers | length > 0
        - mysql_container_status.containers[0].State.Status == 'running'

    - name: Render SQL template to temporary file
      ansible.builtin.template:
        src: init_telemetrydb.sql.j2
        dest: /tmp/init_telemetrydb.sql

    - name: Execute SQL in MySQL container using podman_container_exec
      containers.podman.podman_container_exec:
        name: "{{ mysql_container_name }}"
        command:
          - sh
          - -c
          - |
            mysql -u root -p'{{ mysqldb_root_password }}' < /tmp/init_telemetrydb.sql
      register: sql_exec_result

    - name: Show SQL execution result
      debug:
        var: sql_exec_result.stdout

    - name: Remove the temporary SQL file
      ansible.builtin.file:
        path: /tmp/init_telemetrydb.sql
        state: absent

  rescue:
    - name: Mysql container deployment failed
      ansible.builtin.fail:
        msg: "{{ mysql_container_failure_msg }}"
