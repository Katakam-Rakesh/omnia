# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#!/bin/sh
systemctl start corosync
systemctl start pacemaker

# Check if corosync and pacemaker have started
if ! systemctl status corosync > /dev/null; then
    echo "Corosync has not started. Exiting with return code 1."
    exit 1
fi

if ! systemctl status pacemaker > /dev/null; then
    echo "Pacemaker has not started. Exiting with return code 1."
    exit 1
fi

echo "Corosync and Pacemaker have started. Continuing with the script."

pcs property set stonith-enabled=false
pcs property set no-quorum-policy=ignore

pcs resource group add {{ pcs_group }}
pcs resource group add {{ vip_group }}
pcs constraint colocation add {{ vip_group }} with {{ pcs_group }} INFINITY

pcs resource defaults update migration-threshold={{ migration_threshold }}
pcs resource defaults update failure-timeout={{ failure_timeout }}

{% if hostvars['localhost']['enable_oim_ha'] %}
pcs resource create admin_VIP ocf:heartbeat:IPaddr2 \
        ip={{ hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.admin_virtual_ip_address }} nic={{ admin_nic }} cidr_netmask={{ hostvars['localhost']['network_data'].admin_network.netmask_bits }} \
        op monitor interval={{ monitor_interval }} --group {{ vip_group }}

{% if hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.bmc_virtual_ip_address is defined %}
pcs resource create bmc_VIP ocf:heartbeat:IPaddr2 \
        ip={{ hostvars['localhost']['oim_ha_data'].ansible_facts.oim_ha.bmc_virtual_ip_address }} nic={{ admin_nic }} cidr_netmask={{ hostvars['localhost']['network_data'].admin_network.netmask_bits }} \
        op monitor interval={{ monitor_interval }} --group {{ vip_group }}
{% endif %}

pcs resource defaults update migration-threshold={{ ha_migration_threshold }}
{% endif %}

pcs resource create {{ omnia_core_name }} ocf:heartbeat:podman \
 image={{ omnia_core_image }} \
 name={{ omnia_core_name }} \
 reuse=true \
 run_opts="{{ omnia_core_run_opts }}" \
 op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
 op start interval={{ start_interval }} timeout={{ start_timeout }} \
 op stop interval={{ stop_interval }}  timeout={{ stop_timeout }} --group {{ pcs_group }}

pcs resource create {{ pulp_container_name }} ocf:heartbeat:podman \
 name={{ pulp_container_name }} \
 image={{ pulp_image }} \
 reuse=true \
 run_opts="{{ pulp_run_opts_https if pulp_protocol == 'https' else pulp_run_opts_http }}" \
 op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
 op start interval={{ start_interval }} timeout={{ start_timeout }} \
 op stop interval={{ stop_interval }}  timeout={{ stop_timeout }} --group {{ pcs_group }}

pcs resource create {{ provision_container_name }} ocf:heartbeat:podman \
 name={{ provision_container_name }} \
 image={{ provision_image }} \
 reuse=true \
 run_opts="{{ provision_run_opts }}" \
 op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
 op start interval={{ start_interval }} timeout={{ start_timeout }} \
 op stop interval={{ stop_interval }}  timeout={{ stop_timeout }} --group {{ pcs_group }}

{% if hostvars['localhost']['k8s_support'] %}
pcs resource create {{ kubespray_name }} ocf:heartbeat:podman \
 name={{ kubespray_name }} \
 image={{ kubespray_image }} \
 reuse=true \
 run_opts="{{ kubespray_run_opts }}" \
 op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
 op start interval={{ start_interval }} timeout={{ start_timeout }} \
 op stop interval={{ stop_interval }}  timeout={{ stop_timeout }} --group {{ pcs_group }}
{% endif %}

{% if hostvars['localhost']['enable_routed_internet'] %}
pcs resource create {{ squid_container_name }} ocf:heartbeat:podman \
 name={{ squid_container_name }} \
 image={{ squid_image }} \
 reuse=true \
 run_opts="{{ squid_run_opts }}" \
 op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
 op start interval={{ start_interval }} timeout={{ start_timeout }} \
 op stop interval={{ stop_interval }}  timeout={{ stop_timeout }} --group {{ pcs_group }}
{% endif %}

# Resource for idrac_telemetry containers
{% if hostvars['localhost']['idrac_telemetry_support'] %}
pcs resource group add {{ telemetry_pcs_group }}
pcs constraint colocation add {{ vip_group }} with {{ telemetry_pcs_group }} INFINITY
# Resource for MySQL container
pcs resource create {{ mysql_container_name }} ocf:heartbeat:podman \
    name={{ mysql_container_name }} \
    image={{ mysql_docker_image }}:{{ mysql_image_tag }} \
    reuse=true \
    run_opts="{{ mysql_run_opts }}"  \
    op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
    op start interval={{ start_interval }} timeout={{ start_timeout }} \
    op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
    --group {{ telemetry_pcs_group }}

# Resource for ActiveMQ container
pcs resource create {{ activemq_container_name }} ocf:heartbeat:podman \
  name={{ activemq_container_name }} \
  image={{ activemq_image }} \
  reuse=true \
  run_opts="{{ activemq_run_opts }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
  --group {{ telemetry_pcs_group }}

# Resource for iDRAC-telemetry-receiver container
pcs resource create {{ idrac_telemetry_receiver_container_name }} ocf:heartbeat:podman \
  name={{ idrac_telemetry_receiver_container_name }} \
  image={{ idrac_telemetry_receiver_go_image }} \
  reuse=true \
  run_opts="{{ idrac_telemetry_receiver_run_opts }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
  --group {{ telemetry_pcs_group }}
{% endif %}

# Resource for prometheus and prometheus_pump
{% if hostvars['localhost']['idrac_telemetry_support'] and hostvars['localhost']['idrac_telemetry_collection_type'] == "prometheus" %}
# Resource for prometheus pump container
pcs resource create {{ prometheus_pump_container_name }} ocf:heartbeat:podman \
  name={{ prometheus_pump_container_name }} \
  image={{ prometheus_pump_image }} \
  reuse=true \
  run_opts="{{ prometheus_pump_run_opts }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
  --group {{ telemetry_pcs_group }}

# Resource for prometheus container
pcs resource create {{ prometheus_container_name }} ocf:heartbeat:podman \
  name={{ prometheus_container_name }} \
  image={{ prometheus_image }} \
  reuse=true \
  run_opts="{{ prometheus_run_opts }}" \
  run_cmd="--config.file=/config/prometheus.yml --storage.tsdb.path=/prometheus" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
  --group {{ telemetry_pcs_group }}
{% endif %}

# Resource for omnia visualization containers
{% if hostvars['localhost']['visualization_support'] %}
pcs resource group add {{ visualization_pcs_group }}
pcs constraint colocation add {{ vip_group }} with {{ visualization_pcs_group }} INFINITY
# Resource for grafana container
pcs resource create {{ grafana_container_name }} ocf:heartbeat:podman \
    name={{ grafana_container_name }} \
    image={{ grafana_image }}:{{ grafana_image_tag }} \
    reuse=true \
    run_opts="{{ grafana_run_opts }}"  \
    op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
    op start interval={{ start_interval }} timeout={{ start_timeout }} \
    op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
    --group {{ visualization_pcs_group }}

# Resource for loki container
pcs resource create {{ loki_container_name }} ocf:heartbeat:podman \
  name={{ loki_container_name }} \
  image={{ loki_image }}:{{ loki_image_tag }} \
  reuse=true \
  run_opts="{{ loki_run_opts }}" \
  run_cmd="{{ loki_run_cmd }}" \
  monitor_cmd="{{ loki_monitor_cmd }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
  --group {{ visualization_pcs_group }}

# Resource for promtail container
pcs resource create {{ promtail_container_name }} ocf:heartbeat:podman \
  name={{ promtail_container_name }} \
  image={{ promtail_image }}:{{ promtail_image_tag }} \
  reuse=true \
  run_opts="{{ promtail_run_opts }}" \
  run_cmd="{{ promtail_run_cmd }}" \
  monitor_cmd="{{ promtail_monitor_cmd }}" \
  op monitor interval={{ monitor_interval }} timeout={{ monitor_timeout }} on-fail=restart \
  op start interval={{ start_interval }} timeout={{ start_timeout }} \
  op stop interval={{ stop_interval }} timeout={{ stop_timeout }} \
  --group {{ visualization_pcs_group }}
{% endif %}

# Create ordering constraints
# commenting as group and contraint does not work together
# pcs constraint order start {{ omnia_core_name }} then start {{ pulp_container_name }}
# pcs constraint order start {{ omnia_core_name }} then start {{ provision_container_name }}
# {% if hostvars['localhost']['k8s_support'] %}
# {% endif %}
# {% if hostvars['localhost']['enable_routed_internet'] %}
# pcs constraint order start {{ omnia_core_name }} then start {{ squid_container_name }}
# {% endif %}

# Initialize the total sleep time
total_sleep_time=0
# Loop for a maximum of three minutes
max_iterations=18
for ((i=0; i<max_iterations; i++)); do
    # Check if any pcs resources are stopped
    if pcs resource | grep "Stopped\|FAILED"; then
        # If any resources are stopped, sleep for 10 seconds
        echo "Sleeping for 10 seconds. Total sleep time: $total_sleep_time seconds."
        sleep 10
        total_sleep_time=$((total_sleep_time + 10))
    else
        # If all resources are running, exit the loop
        break
    fi
done

# Create a file which signifies the pcs resources were created.
# This file also contains the resources and its state which ansible can check against.
echo "$(date): PCS Container Resources Have Been Created"
pcs resource | awk -F' ' '{print $2 " " $4}' | sed 's/^\s*//;s/\s*$//' > {{ pcs_container_resources_finished }}
