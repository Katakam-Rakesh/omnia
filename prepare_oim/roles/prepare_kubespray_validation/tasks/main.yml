# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---

- name: Get kubespray image with version {{ kube_version }}
  ansible.builtin.shell: >
    podman images --format "{{ '{{.Repository}}:{{.Tag}}' }}" | grep 'omnia_kubespray' | grep '{{ kube_version }}' || true
  register: kubespray_image_raw
  changed_when: false
  ignore_errors: true

- name: Check kubespray image exists in podman
  when: kubespray_image_raw is defined and kubespray_image_raw.stdout | trim != ''
  block:
    - name: Set kubespray_image fact (without tag) {{ kubespray_image_raw.stdout }}
      ansible.builtin.set_fact:
        kubespray_image: "{{ kubespray_image_raw.stdout.split(':')[0] }}"

    - name: Check in Podman if the image exists for {{ kubespray_image }}:{{ kube_version }}
      containers.podman.podman_image_info:
        name: "{{ kubespray_image }}:{{ kube_version }}"
      register: kubespray_image_info
      ignore_errors: true

- name: Show k8s compatible version kubespray
  ansible.builtin.debug:
    msg: "{{ k8s_compatibility_message }}"
  when: kubespray_image_info.images is defined

- name: Handle user decision for missing kubespray image
  when: kubespray_image_info.images is not defined or kubespray_image_info.images | length == 0
  block:
    - name: Get kubespray image tags
      ansible.builtin.shell: >
        podman images --format "{{ '{{.Repository}}:{{.Tag}}' }}" | grep 'omnia_kubespray'
      register: kubespray_image_raw_tags
      changed_when: false
      ignore_errors: true

    - name: Extract version tags only (vX.Y.Z)
      ansible.builtin.set_fact:
        kubespray_version_tags: >-
          {{
            kubespray_image_raw_tags.stdout_lines
            | map('regex_search', '^.+:(v[0-9.]+)$')
            | select('defined')
            | list
          }}

    - name: Sort versions using version_sort
      ansible.builtin.set_fact:
        sorted_kubespray_tags: "{{ kubespray_version_tags | community.general.version_sort }}"

    - name: Set latest version tag
      ansible.builtin.set_fact:
        kubespray_latest_tag: "{{ sorted_kubespray_tags[-1] }}"

    - name: Show latest omnia_kubespray version tag
      ansible.builtin.debug:
        msg: "{{ omnia_kubespray_latest_ver_msg }}"

    - name: Show supported k8s version
      ansible.builtin.set_fact:
        k8s_to_kubespray_latest: "{{ supported_k8s_version[kubespray_latest_tag.split(':')[1]] | default([]) | join(', ') }}"

    - name: Prompt user for action if kubespray image is not found
      ansible.builtin.pause:
        prompt: |
          The existing kubespray image is not compatible with Kubernetes version {{ k8s_version }}.

          1) Rebuild the kubespray image with {{ kube_version }} using build_image.sh
          2) Update software_config.json with a supported version: {{ k8s_to_kubespray_latest }}

          Enter your choice (1 or 2):
      register: user_choice

    - name: Set action based on user input
      ansible.builtin.set_fact:
        kubespray_action: >-
          {{
            (
              'rebuild' if (user_choice.user_input | default('') | trim) == '1'
              else 'update_config' if (user_choice.user_input | default('') | trim) == '2'
              else 'invalid'
            ) | trim
          }}

    - name: Fail if invalid choice
      ansible.builtin.fail:
        msg: "Invalid choice: {{ user_choice.user_input | default('') | trim }}. Please enter 1 or 2."
      when: kubespray_action == 'invalid'

    - name: Run kubespray image build script
      ansible.builtin.fail:
        msg: |
          To rebuild the image , Run image build script: ./build_images.sh kubespray kubespray_version={{ kube_version }}
      when: kubespray_action == 'rebuild'

    - name: Fail with message to update software config
      ansible.builtin.fail:
        msg: |
          Please update software_config.json with a supported Kubernetes version:
          {{ k8s_to_kubespray_latest }}
          Then re-run prepare_oim.yml.
      when: kubespray_action == 'update_config'
