#!/bin/bash
################################################################################################################
#  omnia_nic_autoconnect:
#      Configure autoconnect to all active nic in all the cluster nodes
#      The nic name might change between the installation and 1st boot
#      Active all the nics with network link during system boot
#      Delete the default route for the admin nic if there are multiple default routes
#
#################################################################################################################
# Define log file
LOGFILE="/var/log/xcat/xcat.log"

log() {
  echo "$1" >> "$LOGFILE"
}

log "INFO: Starting omnia_nic_autoconnect script"

# Check if nmcli is available
nmcli_available=false
if command -v nmcli >/dev/null 2>&1; then
    if nmcli -t -f UUID connection show >/dev/null 2>&1; then
        nmcli_available=true
    fi
fi

if [ "$nmcli_available" = true ]; then
    log "INFO: nmcli is available, proceeding to check NICs --"

    # Loop through all interfaces except 'lo'
    for iface in $(ip -o link show | awk -F': ' '{print $2}' | grep -v lo); do
        state=$(cat /sys/class/net/$iface/operstate)

        log "INFO: Checking interface: $iface, state: $state"

        if [ "$state" = "up" ]; then
            log "INFO: Interface $iface is UP, checking corresponding .nmconnection file..."

            conn_file="/etc/NetworkManager/system-connections/${iface}.nmconnection"

            if [ -f "$conn_file" ]; then
                log "INFO: Found connection file: $conn_file"

                # Check if link is detected (physical connection)
                if ethtool "$iface" | grep -E -i "Link detected.*yes" >/dev/null 2>&1; then
                    log "INFO: Link detected for $iface, modifying autoconnect..."

                    # Modify autoconnect
                    sed -i 's/autoconnect=false/autoconnect=true/' "$conn_file"
                else
                    log "INFO: Link NOT detected for $iface, skipping modification..."
                fi
            else
                log "INFO: Connection file for $iface does not exist, skipping..."
            fi
        else
            log "INFO: Interface $iface is NOT UP, skipping..."
        fi
    done

    # Restart NetworkManager to apply changes
    log "INFO: Restarting NetworkManager service..."
    systemctl restart NetworkManager

    # Show active connections after restart
    log "INFO: Showing nmcli connection show output:"
    log "$(nmcli connection show)"

    # Get the NIC name from the variable
    admin_nic="{{ hostvars['omnia_provision']['admin_nic'] }}"
    log "INFO: Verifying default route for admin NIC $admin_nic..."
    # Count the number of default routes
    default_routes=$(ip route show default | wc -l)

    # If there are multiple default routes, remove the one for the specified NIC
    if [ "$default_routes" -gt 1 ]; then
        # Find and delete the route for the specific NIC
        ip route show default | grep "dev $admin_nic" | while read -r line; do
            log "DEBUG: Deleting route- $line"
            ip route del $line
        done

        # Persist the change by modifying the appropriate network configuration file
        # Get the active connection name for the admin NIC
        conn_name=$(nmcli connection show --active | grep $admin_nic | awk '{print $1}')
        if [ -n "$conn_name" ]; then
            log "INFO: Setting never-default to yes for $conn_name"
            nmcli connection modify "$conn_name" ipv4.never-default yes
            nmcli connection up "$conn_name"
            log "INFO: Modified default route for $admin_nic from NetworkManager"
            log "INFO: Showing 'ip route show default': $(ip route show default)"
        fi
    else
        log "INFO: Only one default route found, no action needed."
    fi
else
    log "ERROR: -- nmcli not available, exiting --"
    exit 1
fi