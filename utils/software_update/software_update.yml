# Copyright 2025 Dell Inc. or its subsidiaries. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
# local_repo has to be run before software_update

- name: Invoke get_config_credentials.yml
  when: not config_file_status | default(false) | bool
  ansible.builtin.import_playbook: ../credential_utility/get_config_credentials.yml

- name: Include input project directory
  when: not project_dir_status | default(false) | bool
  ansible.builtin.import_playbook: ../include_input_dir.yml

- name: Set_fact for fetch omnia config credentials
  hosts: localhost
  connection: local
  tasks:
    - name: Set dynamic run tags including 'additional_software'
      when: not config_file_status | default(false) | bool
      ansible.builtin.set_fact:
        omnia_run_tags: "{{ (ansible_run_tags | default([]) + ['additional_software']) | unique }}"
        cacheable: true

- name: Invoke validate_config.yml to perform L1 and L2 validations with additional_software tag
  ansible.builtin.import_playbook: ../../input_validation/validate_config.yml

- name: Check for additional_software in software_config.json
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Parse software_config.json
      ansible.builtin.set_fact:
        software_config: "{{ include_software_config.content | b64decode | from_json }}"
      when: software_config_content.content is defined
      failed_when: false

    - name: Check if additional_software is present in software_config.json
      ansible.builtin.set_fact:
        additional_software_present: "{{ 'additional_software' in software_config }}"
      when: software_config is defined
      failed_when: false

    - name: Warn if additional_software is not present in software_config.json
      ansible.builtin.pause:
        prompt: "Warning: 'additional_software' section is not defined in software_config.json. Press ENTER to continue"
      when: additional_software_present is not defined or not additional_software_present

- name: Get the additional software organized by group
  hosts: localhost
  roles:
    - software_update
